generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  name      String  @unique
  avatarUrl String?
  isVerified Boolean @default(false)
  twoFactorSecret String?
  twoFactorURL String?
  twoFactorRegistered Boolean @default(false)
  googleId String?

  // Many-to-many self relation for friends (implicit join table)
  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  // Matches where this user is player1
  player1Matches Match[] @relation("Player1Matches")

  // Matches where this user is player2
  player2Matches Match[] @relation("Player2Matches")

  // Matches where this user is winner
  winnerMatches Match[] @relation("WinnerMatches")

  verificationCodes VerificationCode[]

  passwordResetToken PasswordResetToken?

  createdAt DateTime @default(now())
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  usedAt    DateTime? 
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Match {
  id        String   @id @default(cuid())
  player1Id String
  player2Id String
  winnerId  String
  date      DateTime @default(now())

  player1 User @relation("Player1Matches", fields: [player1Id], references: [id])
  player2 User @relation("Player2Matches", fields: [player2Id], references: [id])
  winner  User @relation("WinnerMatches", fields: [winnerId], references: [id])
}

